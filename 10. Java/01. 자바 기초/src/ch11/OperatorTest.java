package ch11;

/*
 * ===================================================================================================
 * 11. 자바의 연산자들(1) - (대입, 부호, 산술, 복합대입, 증감연산자) 
 * ---------------------------------------------------------------------------------------------------
 * 항과 연산자
 * - 항(operand) : 연산에 사용되는 값
 * - 연산자(operator) : 항을 이용하여 연산하는 기호
 * ---------------------------------------------------------------------------------------------------
 * 대입 연산자(assignment operator)
 * - 변수에 다른 변수나 값을 대입하는 연산자
 * - 이항 연산자 중 우선 순위가 가장 낮은 연산자들
 * - 왼쪽 변수 = 오른쪽 변수(또는 식, 값)
 * ---------------------------------------------------------------------------------------------------
 * 부호 연산자
 * - 단항 연산자
 * - 변수의 부호를 유지(+)하거나 바꿈(-)
 * - 실제 변수의 부호가 변하려면 대입 연산자를 사용해야 함
 * ---------------------------------------------------------------------------------------------------
 * 산술 연산자
 * - 사칙 연산자
 *   + : 두 항을 더합니다. 예) 5 + 3
 *   - : 앞에 있는 항에서 뒤에 있는 항을 뺍니다. 예) 5 - 3
 *   * : 두 항을 곱합니니다. 예) 5 + 3
 *   / : 앞에 있는 항에서 뒤에 있는 항을 나누어 몫을 구합니다. 예) 5 /3
 *   % : 앞에 있는 항에서 뒤에 있는 항을 나누어 나머지를 구합니다. 예) 5 % 3 
 * - % 나머지 구하는 연산자, 숫자 n의 나머지 범위는 0 ~ n-1
 * ---------------------------------------------------------------------------------------------------
 * 복합 대입 연산자
 * - 대입 연산자와 다른 연산자가 함께 쓰임
 * - += : 두 항의 값을 더해서 왼쪽 항에 대입합니다. 예) num1 += 2;, num1 = num1 + 2;와 같음
 *   -= : 왼쪽 항에서 오른쪽 항을 빼서 그 값을 왼쪽 항에 대입합니다. 예) num1 -= 2;, num1 = num1 - 2;와 같음
 *   *= : 두 항의 값을 곱해서 왼쪽 항에 대입합니다. 예) num1 *= 2;, num1 = num1 * 2;와 같음
 *   /= : 왼쪽 항을 오른쪽 항으로 나누어 그 값을 왼쪽 항에 대입합니다. 예) num1 /= 2;, num1 = num1 / 2;와 같음
 *   %= : 왼쪽 항을 오른쪽 항으로 나누어 그 나머지를 왼쪽 항에 대입합니다. 예) num1 %= 2;, num1 = num1 % 2;와 같음
 *   <<= : 비트를 왼쪽으로 이동하고 그 값을 왼쪽 항에 대입합니다. 예) num1 <<= 2;, num1 = num1 << 2;와 같음
 *   >>= : 비트를 오른족으로 이동하고 그 값을 왼족 항에 대입합니다. 예) num1 >>= 2;, num1 = num1 >> 2;와 같음
 *         (왼쪽에 채워지는 비트 값은 부호 비트와 동일)
 *   >>>= : 비트를 오른쪽으로 이동하고 그 값을 왼쪽 항에 대입합니다. 예) num1 >>>= 2;, num1 = num1 >>> 2;와 같음
 *          (왼쪽에 채워지는 비트 값은 0)
 *   &= : 두 항의 & 비트 연산 후 그 값을 왼쪽 항에 대입합니다. 예) num1 &= 2;, num1 = num1 & 2;와 같음
 *   |= : 두 항의 | 비트 연산 후 그 값을 왼쪽 항에 대입합니다. 예) num1 |= 2;, num1 = num1 | 2;와 같음
 *   ^= : 두 항의 ^ 비트 연산 후 그 값을 왼쪽 항에 대입합니다. 예) num1 ^= 2;, num1 = num1 ^ 2;와 같음
 * ---------------------------------------------------------------------------------------------------
 * 증가, 감소 연산자
 * - 단항 연산자 
 * - 변수의 값을 1 더하거나 1 뺄때 사용
 * - 연산자가 항의 앞에 있는가 뒤에 있는가에 따라 연산 시점과 결과가 달라짐
 * - 문장(statement)의 끝(;)을 기준으로 연산 시점을 생각해야 함
 *   ++ : 항의 값에 1을 더합니다. 예) val = ++num // 먼저 num값이 1 증가한 후 val 변수에 대입
 *                             val = num++ // val 변수에 기존 num값을 먼저 대입한 후 num값 1 증가
 *   -- : 항의 값에서 1을 뺍니다. 예) val = --num // 먼저 num값이 1 감소한 후 val 변수에 대입
 *                             val = num-- // val 변수에 기존 num값을 먼저 대입한 후 num값 1 감소
 * ===================================================================================================
 */
public class OperatorTest {

	public static void main(String[] args) {

		int gameScore = 150;
		
		int lastScore = gameScore--; // gameScore += 1; gameScore = gameScore + 1;
		
		System.out.println(lastScore);
		System.out.println(gameScore);
		
	} // end main()

} // end class OperatorTest
