package ch13.domain.userinfo;

/*
 * ===================================================================================================
 * 12. 인터페이스는 왜 쓰는가?
 * ---------------------------------------------------------------------------------------------------
 * 인터페이스가 하는 일
 * - 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
 * - 일종의 클라이언트 코드와의 약속이며 클래스나 프로그램이 제공하는 명세(specification)
 * - 클라이언트 프로그램은 인터페이스에 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할 수 있음
 * - 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미임
 * - 인터페이스를 구현한 다양한 객체를 사용함 > 다형성
 * - 인터페이스 사용 예) JDBC 인터페이스
 * ===================================================================================================
 * 13. 인터페이스를 활용한 다형성 구현(dao 구현하기)
 * ---------------------------------------------------------------------------------------------------
 * 인터페이스와 다형성
 * - 하나의 인터페이스를 여러 객체가 구현하게 되면 클라이언트 프로그램은 인터페이스의 메서드를 활용하여 
 *   여러 객체의 구현을 사용할 수 있음(다형성)
 * ---------------------------------------------------------------------------------------------------
 * 인터페이스를 활용한 dao 구현하기
 * - DB에 회원 정보를 넣는 dao(data access object)를 여러 DB 제품이 지원될 수 있게 구현함
 * - 환경파일(db.properties)에서 database의 종류에 대한 정보를 읽고 그 정보에 맞게 dao 인스턴스를 생성하여 실행될 수 있게 함
 * ===================================================================================================
 */
public class UserInfo {
	
	private String userId;
	private String passwd;
	private String userName;
	
	public String getUserId() {
		return userId;
	}
	
	public void setUserId(String userId) {
		this.userId = userId;
	}
	
	public String getPasswd() {
		return passwd;
	}
	
	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
	
	public String getUserName() {
		return userName;
	}
	
	public void setUserName(String userName) {
		this.userName = userName;
	}
	
} // end class UserInfo
